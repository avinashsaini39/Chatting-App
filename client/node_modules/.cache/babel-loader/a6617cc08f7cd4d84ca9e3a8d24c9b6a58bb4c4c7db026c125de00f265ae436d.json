{"ast":null,"code":"var _jsxFileName = \"/Users/avinashsaini/Documents/project/chat/client/src/components/Chatroom/Chatroom.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { Card, List, Input, Button, Layout, Row, Col } from 'antd';\n// import io from 'socket.io-client';\n// import './ChatRoom.css';\n// import moment from 'moment';\n\n// const { Content } = Layout;\n\n// const socket = io('http://localhost:5500');\n\n// const ChatRoom = () => {\n//   const [users, setUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [message, setMessage] = useState('');\n//   const [isGroupChat, setIsGroupChat] = useState(false);\n//   const chatContainerRef = useRef(null);\n\n//   useEffect(() => {\n//     const username = localStorage.getItem('username');\n//     if (username) {\n//       socket.emit('user connected', username);\n//     }\n\n//     socket.emit('get users');\n//     socket.on('users list', (usersList) => {\n//       setUsers(usersList.filter(user => user.username !== username)); // Filter out the signed-in user\n//     });\n\n//     socket.on('user status', (userStatus) => {\n//       setUsers((prevUsers) =>\n//         prevUsers.map(user =>\n//           user.username === userStatus.username ? { ...user, status: userStatus.status } : user\n//         )\n//       );\n//     });\n\n//     socket.on('chat history', (history) => {\n//       if (selectedUser && !isGroupChat) {\n//         localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     socket.on('group chat history', (history) => {\n//       if (isGroupChat) {\n//         localStorage.setItem('chat_history_group', JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     // Handle personal chat messages\n//     socket.on('personal chat message', (msg) => {\n//       if (!isGroupChat && (msg.to === selectedUser || msg.username === selectedUser || msg.username === localStorage.getItem('username'))) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n\n//     // Handle group chat messages\n//     socket.on('group chat message', (msg) => {\n//       if (isGroupChat) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem('chat_history_group', JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n\n//     return () => {\n//       socket.off('users list');\n//       socket.off('user status');\n//       socket.off('chat history');\n//       socket.off('group chat history');\n//       socket.off('personal chat message');\n//       socket.off('group chat message');\n//     };\n//   }, [selectedUser, isGroupChat]);\n\n//   useEffect(() => {\n//     if (isGroupChat) {\n//       const savedHistory = localStorage.getItem('chat_history_group');\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get group chat history');\n//       }\n//     } else if (selectedUser) {\n//       const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get chat history', selectedUser);\n//       }\n//     }\n//   }, [selectedUser, isGroupChat]);\n\n//   const sendMessage = () => {\n//     const username = localStorage.getItem('username');\n//     if (!username) {\n//       console.error('Username is not found in localStorage');\n//       return;\n//     }\n\n//     const msg = { username, text: message, timestamp: new Date() };\n\n//     if (isGroupChat) {\n//       socket.emit('group chat message', msg);\n//     } else {\n//       socket.emit('chat message', { ...msg, to: selectedUser });\n//       // Do not add the message to the local state here\n//     }\n//     setMessage('');\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('username');\n//     window.location.href = '/';\n//   };\n\n//   useEffect(() => {\n//     if (chatContainerRef.current) {\n//       chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n//     }\n//   }, [messages]);\n\n//   const handleUserClick = (user) => {\n//     if (user === 'Group Chat') {\n//       setSelectedUser(null);\n//       setIsGroupChat(true);\n//     } else {\n//       setSelectedUser(user);\n//       setIsGroupChat(false);\n//     }\n//   };\n\n//   return (\n//     <Layout className=\"chatroom-layout\">\n//       <Row justify=\"center\" align=\"middle\" style={{ height: '100%', padding: '10px' }}>\n//         <Col xs={24} sm={22} md={20} lg={18} xl={16}>\n//           <Card\n//             className=\"chatroom-card\"\n//             title=\"Chat Room\"\n//             bordered={false}\n//             extra={<Button onClick={logout}>Logout</Button>}\n//           >\n//             <Row gutter={[16, 16]}>\n//               <Col xs={24} md={8} className=\"chatroom-sider\">\n//                 <List\n//                   dataSource={['Group Chat', ...users.map(user => user.username)]}\n//                   renderItem={(user) => (\n//                     <List.Item\n//                       className={user === selectedUser ? 'ant-list-item-selected' : ''}\n//                       style={{ cursor: 'pointer' }}\n//                       onClick={() => handleUserClick(user)}\n//                     >\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <div\n//                           className={users.find(u => u.username === user)?.status === 'online' ? 'user-badge' : 'user-badge-offline'}\n//                         />\n//                         <strong style={{ marginLeft: '8px' }}>{user}</strong>\n//                       </div>\n//                     </List.Item>\n//                   )}\n//                 />\n//               </Col>\n//               <Col xs={24} md={16}>\n//                 <Content style={{ padding: '10px' }}>\n//                   {isGroupChat || selectedUser ? (\n//                     <Card title={isGroupChat ? \"Group Chat\" : `Chat with ${selectedUser}`} bordered={false}>\n//                       <div ref={chatContainerRef} id=\"chat-container\" className=\"chat-container\" style={{ height: '300px', overflowY: 'auto' }}>\n//                         <List\n//                           dataSource={messages}\n//                           renderItem={(item) => (\n//                             <List.Item>\n//                               <strong>{item.username}:</strong> {item.text}{' '}\n//                               <em>{new Date(item.timestamp).toLocaleTimeString()}</em>\n//                             </List.Item>\n//                           )}\n//                         />\n//                       </div>\n//                       <Input\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         onPressEnter={sendMessage}\n//                         placeholder=\"Type a message...\"\n//                         style={{ marginBottom: '10px' }}\n//                       />\n//                       <Button type=\"primary\" onClick={sendMessage}>\n//                         Send\n//                       </Button>\n//                     </Card>\n//                   ) : (\n//                     <div>Please select a user to start chatting</div>\n//                   )}\n//                 </Content>\n//               </Col>\n//             </Row>\n//           </Card>\n//           <div className=\"chatroom-footer\">\n//             Â© {moment().format('YYYY')}\n//           </div>\n//         </Col>\n//       </Row>\n//     </Layout>\n//   );\n// };\n\n// export default ChatRoom;\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Card, List, Input, Button, Layout, Row, Col } from 'antd';\nimport io from 'socket.io-client';\nimport moment from 'moment';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Content\n} = Layout;\nconst socket = io('http://localhost:5500');\nconst ChatRoom = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const chatContainerRef = useRef(null);\n  useEffect(() => {\n    const username = localStorage.getItem('username');\n    if (username) {\n      socket.emit('user connected', username);\n\n      // Listen for any undelivered messages\n      socket.on('personal chat message', msg => {\n        if (msg.to === username || msg.username === username) {\n          setMessages(prevMessages => {\n            const updatedMessages = [...prevMessages, msg];\n            localStorage.setItem(`chat_history_${msg.username === username ? msg.to : msg.username}`, JSON.stringify(updatedMessages));\n            return updatedMessages;\n          });\n        }\n      });\n\n      // Fetch users list when the component mounts\n      socket.emit('get users');\n      socket.on('users list', usersList => {\n        setUsers(usersList.filter(user => user.username !== username));\n      });\n\n      // Update user status\n      socket.on('user status', userStatus => {\n        setUsers(prevUsers => prevUsers.map(user => user.username === userStatus.username ? {\n          ...user,\n          status: userStatus.status\n        } : user));\n      });\n      return () => {\n        socket.off('personal chat message');\n        socket.off('users list');\n        socket.off('user status');\n      };\n    }\n  }, []);\n  useEffect(() => {\n    if (selectedUser) {\n      // Load chat history from localStorage or fetch from server\n      const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n      if (savedHistory) {\n        setMessages(JSON.parse(savedHistory));\n      } else {\n        socket.emit('get chat history', selectedUser);\n        socket.on('chat history', history => {\n          setMessages(history);\n          localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n        });\n      }\n      return () => socket.off('chat history');\n    }\n  }, [selectedUser]);\n  const sendMessage = () => {\n    const username = localStorage.getItem('username');\n    if (!username || !selectedUser || !message.trim()) return;\n    const msg = {\n      username,\n      text: message,\n      timestamp: new Date(),\n      to: selectedUser\n    };\n\n    // Emit the message to the server\n    socket.emit('personal chat message', msg);\n\n    // Update local state and localStorage\n    setMessages(prevMessages => {\n      const updatedMessages = [...prevMessages, msg];\n      localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n      return updatedMessages;\n    });\n    setMessage('');\n  };\n\n  // Scroll chat to the bottom whenever messages change\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const handleLogout = () => {\n    localStorage.removeItem('username');\n    localStorage.removeItem('token');\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    className: \"chatroom-layout\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 8,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"chatroom-sider\",\n          children: [/*#__PURE__*/_jsxDEV(List, {\n            itemLayout: \"horizontal\",\n            dataSource: users,\n            renderItem: user => /*#__PURE__*/_jsxDEV(List.Item, {\n              className: user.username === selectedUser ? 'ant-list-item-selected' : '',\n              onClick: () => setSelectedUser(user.username),\n              children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `user-badge ${user.status === 'online' ? 'user-badge-online' : 'user-badge-offline'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 29\n                }, this),\n                title: user.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"danger\",\n            block: true,\n            onClick: handleLogout,\n            style: {\n              marginTop: '10px'\n            },\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 16,\n        md: 18,\n        children: /*#__PURE__*/_jsxDEV(Content, {\n          className: \"chatroom-content\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"chatroom-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ref: chatContainerRef,\n              className: \"chat-container\",\n              children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `chat-message ${msg.username === localStorage.getItem('username') ? 'sent' : 'received'}`,\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: msg.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 21\n                }, this), \": \", msg.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: moment(msg.timestamp).format('HH:mm:ss')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 65\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              value: message,\n              onChange: e => setMessage(e.target.value),\n              onPressEnter: sendMessage,\n              placeholder: \"Type a message...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              onClick: sendMessage,\n              style: {\n                marginTop: '10px'\n              },\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"chatroom-footer\",\n      children: [\"\\xA9 \", moment().year()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"1DQVSmJ/lr0qAGhX9piOGDAJMTE=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","List","Input","Button","Layout","Row","Col","io","moment","jsxDEV","_jsxDEV","Content","socket","ChatRoom","_s","users","setUsers","selectedUser","setSelectedUser","messages","setMessages","message","setMessage","chatContainerRef","username","localStorage","getItem","emit","on","msg","to","prevMessages","updatedMessages","setItem","JSON","stringify","usersList","filter","user","userStatus","prevUsers","map","status","off","savedHistory","parse","history","sendMessage","trim","text","timestamp","Date","current","scrollTop","scrollHeight","handleLogout","removeItem","window","location","reload","className","children","xs","sm","md","itemLayout","dataSource","renderItem","Item","onClick","Meta","avatar","fileName","_jsxFileName","lineNumber","columnNumber","title","type","block","style","marginTop","ref","index","format","value","onChange","e","target","onPressEnter","placeholder","year","_c","$RefreshReg$"],"sources":["/Users/avinashsaini/Documents/project/chat/client/src/components/Chatroom/Chatroom.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { Card, List, Input, Button, Layout, Row, Col } from 'antd';\n// import io from 'socket.io-client';\n// import './ChatRoom.css';\n// import moment from 'moment';\n\n// const { Content } = Layout;\n\n// const socket = io('http://localhost:5500');\n\n// const ChatRoom = () => {\n//   const [users, setUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [message, setMessage] = useState('');\n//   const [isGroupChat, setIsGroupChat] = useState(false);\n//   const chatContainerRef = useRef(null);\n\n//   useEffect(() => {\n//     const username = localStorage.getItem('username');\n//     if (username) {\n//       socket.emit('user connected', username);\n//     }\n\n//     socket.emit('get users');\n//     socket.on('users list', (usersList) => {\n//       setUsers(usersList.filter(user => user.username !== username)); // Filter out the signed-in user\n//     });\n\n//     socket.on('user status', (userStatus) => {\n//       setUsers((prevUsers) =>\n//         prevUsers.map(user =>\n//           user.username === userStatus.username ? { ...user, status: userStatus.status } : user\n//         )\n//       );\n//     });\n\n//     socket.on('chat history', (history) => {\n//       if (selectedUser && !isGroupChat) {\n//         localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     socket.on('group chat history', (history) => {\n//       if (isGroupChat) {\n//         localStorage.setItem('chat_history_group', JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     // Handle personal chat messages\n//     socket.on('personal chat message', (msg) => {\n//       if (!isGroupChat && (msg.to === selectedUser || msg.username === selectedUser || msg.username === localStorage.getItem('username'))) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n    \n\n//     // Handle group chat messages\n//     socket.on('group chat message', (msg) => {\n//       if (isGroupChat) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem('chat_history_group', JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n\n//     return () => {\n//       socket.off('users list');\n//       socket.off('user status');\n//       socket.off('chat history');\n//       socket.off('group chat history');\n//       socket.off('personal chat message');\n//       socket.off('group chat message');\n//     };\n//   }, [selectedUser, isGroupChat]);\n\n//   useEffect(() => {\n//     if (isGroupChat) {\n//       const savedHistory = localStorage.getItem('chat_history_group');\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get group chat history');\n//       }\n//     } else if (selectedUser) {\n//       const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get chat history', selectedUser);\n//       }\n//     }\n//   }, [selectedUser, isGroupChat]);\n\n//   const sendMessage = () => {\n//     const username = localStorage.getItem('username');\n//     if (!username) {\n//       console.error('Username is not found in localStorage');\n//       return;\n//     }\n  \n//     const msg = { username, text: message, timestamp: new Date() };\n  \n//     if (isGroupChat) {\n//       socket.emit('group chat message', msg);\n//     } else {\n//       socket.emit('chat message', { ...msg, to: selectedUser });\n//       // Do not add the message to the local state here\n//     }\n//     setMessage('');\n//   };\n  \n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('username');\n//     window.location.href = '/';\n//   };\n\n//   useEffect(() => {\n//     if (chatContainerRef.current) {\n//       chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n//     }\n//   }, [messages]);\n\n//   const handleUserClick = (user) => {\n//     if (user === 'Group Chat') {\n//       setSelectedUser(null);\n//       setIsGroupChat(true);\n//     } else {\n//       setSelectedUser(user);\n//       setIsGroupChat(false);\n//     }\n//   };\n\n//   return (\n//     <Layout className=\"chatroom-layout\">\n//       <Row justify=\"center\" align=\"middle\" style={{ height: '100%', padding: '10px' }}>\n//         <Col xs={24} sm={22} md={20} lg={18} xl={16}>\n//           <Card\n//             className=\"chatroom-card\"\n//             title=\"Chat Room\"\n//             bordered={false}\n//             extra={<Button onClick={logout}>Logout</Button>}\n//           >\n//             <Row gutter={[16, 16]}>\n//               <Col xs={24} md={8} className=\"chatroom-sider\">\n//                 <List\n//                   dataSource={['Group Chat', ...users.map(user => user.username)]}\n//                   renderItem={(user) => (\n//                     <List.Item\n//                       className={user === selectedUser ? 'ant-list-item-selected' : ''}\n//                       style={{ cursor: 'pointer' }}\n//                       onClick={() => handleUserClick(user)}\n//                     >\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <div\n//                           className={users.find(u => u.username === user)?.status === 'online' ? 'user-badge' : 'user-badge-offline'}\n//                         />\n//                         <strong style={{ marginLeft: '8px' }}>{user}</strong>\n//                       </div>\n//                     </List.Item>\n//                   )}\n//                 />\n//               </Col>\n//               <Col xs={24} md={16}>\n//                 <Content style={{ padding: '10px' }}>\n//                   {isGroupChat || selectedUser ? (\n//                     <Card title={isGroupChat ? \"Group Chat\" : `Chat with ${selectedUser}`} bordered={false}>\n//                       <div ref={chatContainerRef} id=\"chat-container\" className=\"chat-container\" style={{ height: '300px', overflowY: 'auto' }}>\n//                         <List\n//                           dataSource={messages}\n//                           renderItem={(item) => (\n//                             <List.Item>\n//                               <strong>{item.username}:</strong> {item.text}{' '}\n//                               <em>{new Date(item.timestamp).toLocaleTimeString()}</em>\n//                             </List.Item>\n//                           )}\n//                         />\n//                       </div>\n//                       <Input\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         onPressEnter={sendMessage}\n//                         placeholder=\"Type a message...\"\n//                         style={{ marginBottom: '10px' }}\n//                       />\n//                       <Button type=\"primary\" onClick={sendMessage}>\n//                         Send\n//                       </Button>\n//                     </Card>\n//                   ) : (\n//                     <div>Please select a user to start chatting</div>\n//                   )}\n//                 </Content>\n//               </Col>\n//             </Row>\n//           </Card>\n//           <div className=\"chatroom-footer\">\n//             Â© {moment().format('YYYY')}\n//           </div>\n//         </Col>\n//       </Row>\n//     </Layout>\n//   );\n// };\n\n// export default ChatRoom;\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Card, List, Input, Button, Layout, Row, Col } from 'antd';\nimport io from 'socket.io-client';\nimport moment from 'moment';\nimport './ChatRoom.css';\n\nconst { Content } = Layout;\n\nconst socket = io('http://localhost:5500');\n\nconst ChatRoom = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const chatContainerRef = useRef(null);\n\n  useEffect(() => {\n    const username = localStorage.getItem('username');\n    if (username) {\n      socket.emit('user connected', username);\n\n      // Listen for any undelivered messages\n      socket.on('personal chat message', (msg) => {\n        if (msg.to === username || msg.username === username) {\n          setMessages((prevMessages) => {\n            const updatedMessages = [...prevMessages, msg];\n            localStorage.setItem(`chat_history_${msg.username === username ? msg.to : msg.username}`, JSON.stringify(updatedMessages));\n            return updatedMessages;\n          });\n        }\n      });\n\n      // Fetch users list when the component mounts\n      socket.emit('get users');\n      socket.on('users list', (usersList) => {\n        setUsers(usersList.filter(user => user.username !== username));\n      });\n\n      // Update user status\n      socket.on('user status', (userStatus) => {\n        setUsers((prevUsers) =>\n          prevUsers.map(user =>\n            user.username === userStatus.username ? { ...user, status: userStatus.status } : user\n          )\n        );\n      });\n\n      return () => {\n        socket.off('personal chat message');\n        socket.off('users list');\n        socket.off('user status');\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      // Load chat history from localStorage or fetch from server\n      const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n      if (savedHistory) {\n        setMessages(JSON.parse(savedHistory));\n      } else {\n        socket.emit('get chat history', selectedUser);\n        socket.on('chat history', (history) => {\n          setMessages(history);\n          localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n        });\n      }\n\n      return () => socket.off('chat history');\n    }\n  }, [selectedUser]);\n\n  const sendMessage = () => {\n    const username = localStorage.getItem('username');\n    if (!username || !selectedUser || !message.trim()) return;\n\n    const msg = { username, text: message, timestamp: new Date(), to: selectedUser };\n\n    // Emit the message to the server\n    socket.emit('personal chat message', msg);\n\n    // Update local state and localStorage\n    setMessages((prevMessages) => {\n      const updatedMessages = [...prevMessages, msg];\n      localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n      return updatedMessages;\n    });\n\n    setMessage('');\n  };\n\n  // Scroll chat to the bottom whenever messages change\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleLogout = () => {\n    localStorage.removeItem('username');\n    localStorage.removeItem('token');\n    window.location.reload();\n  };\n\n  return (\n    <Layout className=\"chatroom-layout\">\n      <Row>\n        <Col xs={24} sm={8} md={6}>\n          <Card className=\"chatroom-sider\">\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={users}\n              renderItem={(user) => (\n                <List.Item\n                  className={user.username === selectedUser ? 'ant-list-item-selected' : ''}\n                  onClick={() => setSelectedUser(user.username)}\n                >\n                  <List.Item.Meta\n                    avatar={<span className={`user-badge ${user.status === 'online' ? 'user-badge-online' : 'user-badge-offline'}`} />}\n                    title={user.username}\n                  />\n                </List.Item>\n              )}\n            />\n            <Button\n              type=\"danger\"\n              block\n              onClick={handleLogout}\n              style={{ marginTop: '10px' }}\n            >\n              Logout\n            </Button>\n          </Card>\n        </Col>\n        <Col xs={24} sm={16} md={18}>\n          <Content className=\"chatroom-content\">\n            <Card className=\"chatroom-card\">\n              <div ref={chatContainerRef} className=\"chat-container\">\n                {messages.map((msg, index) => (\n                  <div\n                    key={index}\n                    className={`chat-message ${msg.username === localStorage.getItem('username') ? 'sent' : 'received'}`}\n                  >\n                    <strong>{msg.username}</strong>: {msg.text} <span>{moment(msg.timestamp).format('HH:mm:ss')}</span>\n                  </div>\n                ))}\n              </div>\n              <Input\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onPressEnter={sendMessage}\n                placeholder=\"Type a message...\"\n              />\n              <Button type=\"primary\" onClick={sendMessage} style={{ marginTop: '10px' }}>\n                Send\n              </Button>\n            </Card>\n          </Content>\n        </Col>\n      </Row>\n      <footer className=\"chatroom-footer\">Â© {moment().year()}</footer>\n    </Layout>\n  );\n};\n\nexport default ChatRoom;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,GAAG,EAAEC,GAAG,QAAQ,MAAM;AAClE,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,MAAM,MAAM,QAAQ;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}