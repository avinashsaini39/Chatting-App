{"ast":null,"code":"var _jsxFileName = \"/Users/avinashsaini/Documents/project/chat/client/src/components/Chatroom.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { Card, List, Input, Button, Layout, Row, Col } from 'antd';\n// import io from 'socket.io-client';\n// import './ChatRoom.css';\n// import moment from 'moment';\n\n// const { Content } = Layout;\n\n// const socket = io('http://localhost:5500');\n\n// const ChatRoom = () => {\n//   const [users, setUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [message, setMessage] = useState('');\n//   const [isGroupChat, setIsGroupChat] = useState(false);\n//   const chatContainerRef = useRef(null);\n\n//   useEffect(() => {\n//     const username = localStorage.getItem('username');\n//     if (username) {\n//       socket.emit('user connected', username);\n//     }\n\n//     socket.emit('get users');\n//     socket.on('users list', (usersList) => {\n//       setUsers(usersList.filter(user => user.username !== username)); // Filter out the signed-in user\n//     });\n\n//     socket.on('user status', (userStatus) => {\n//       setUsers((prevUsers) =>\n//         prevUsers.map(user =>\n//           user.username === userStatus.username ? { ...user, status: userStatus.status } : user\n//         )\n//       );\n//     });\n\n//     socket.on('chat history', (history) => {\n//       if (selectedUser && !isGroupChat) {\n//         localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     socket.on('group chat history', (history) => {\n//       if (isGroupChat) {\n//         localStorage.setItem('chat_history_group', JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     // Handle personal chat messages\n//     socket.on('personal chat message', (msg) => {\n//       if (!isGroupChat && (msg.to === selectedUser || msg.username === selectedUser || msg.username === localStorage.getItem('username'))) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n\n//     // Handle group chat messages\n//     socket.on('group chat message', (msg) => {\n//       if (isGroupChat) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem('chat_history_group', JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n\n//     return () => {\n//       socket.off('users list');\n//       socket.off('user status');\n//       socket.off('chat history');\n//       socket.off('group chat history');\n//       socket.off('personal chat message');\n//       socket.off('group chat message');\n//     };\n//   }, [selectedUser, isGroupChat]);\n\n//   useEffect(() => {\n//     if (isGroupChat) {\n//       const savedHistory = localStorage.getItem('chat_history_group');\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get group chat history');\n//       }\n//     } else if (selectedUser) {\n//       const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get chat history', selectedUser);\n//       }\n//     }\n//   }, [selectedUser, isGroupChat]);\n\n//   const sendMessage = () => {\n//     const username = localStorage.getItem('username');\n//     if (!username) {\n//       console.error('Username is not found in localStorage');\n//       return;\n//     }\n\n//     const msg = { username, text: message, timestamp: new Date() };\n\n//     if (isGroupChat) {\n//       socket.emit('group chat message', msg);\n//     } else {\n//       socket.emit('chat message', { ...msg, to: selectedUser });\n//       // Do not add the message to the local state here\n//     }\n//     setMessage('');\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('username');\n//     window.location.href = '/';\n//   };\n\n//   useEffect(() => {\n//     if (chatContainerRef.current) {\n//       chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n//     }\n//   }, [messages]);\n\n//   const handleUserClick = (user) => {\n//     if (user === 'Group Chat') {\n//       setSelectedUser(null);\n//       setIsGroupChat(true);\n//     } else {\n//       setSelectedUser(user);\n//       setIsGroupChat(false);\n//     }\n//   };\n\n//   return (\n//     <Layout className=\"chatroom-layout\">\n//       <Row justify=\"center\" align=\"middle\" style={{ height: '100%', padding: '10px' }}>\n//         <Col xs={24} sm={22} md={20} lg={18} xl={16}>\n//           <Card\n//             className=\"chatroom-card\"\n//             title=\"Chat Room\"\n//             bordered={false}\n//             extra={<Button onClick={logout}>Logout</Button>}\n//           >\n//             <Row gutter={[16, 16]}>\n//               <Col xs={24} md={8} className=\"chatroom-sider\">\n//                 <List\n//                   dataSource={['Group Chat', ...users.map(user => user.username)]}\n//                   renderItem={(user) => (\n//                     <List.Item\n//                       className={user === selectedUser ? 'ant-list-item-selected' : ''}\n//                       style={{ cursor: 'pointer' }}\n//                       onClick={() => handleUserClick(user)}\n//                     >\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <div\n//                           className={users.find(u => u.username === user)?.status === 'online' ? 'user-badge' : 'user-badge-offline'}\n//                         />\n//                         <strong style={{ marginLeft: '8px' }}>{user}</strong>\n//                       </div>\n//                     </List.Item>\n//                   )}\n//                 />\n//               </Col>\n//               <Col xs={24} md={16}>\n//                 <Content style={{ padding: '10px' }}>\n//                   {isGroupChat || selectedUser ? (\n//                     <Card title={isGroupChat ? \"Group Chat\" : `Chat with ${selectedUser}`} bordered={false}>\n//                       <div ref={chatContainerRef} id=\"chat-container\" className=\"chat-container\" style={{ height: '300px', overflowY: 'auto' }}>\n//                         <List\n//                           dataSource={messages}\n//                           renderItem={(item) => (\n//                             <List.Item>\n//                               <strong>{item.username}:</strong> {item.text}{' '}\n//                               <em>{new Date(item.timestamp).toLocaleTimeString()}</em>\n//                             </List.Item>\n//                           )}\n//                         />\n//                       </div>\n//                       <Input\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         onPressEnter={sendMessage}\n//                         placeholder=\"Type a message...\"\n//                         style={{ marginBottom: '10px' }}\n//                       />\n//                       <Button type=\"primary\" onClick={sendMessage}>\n//                         Send\n//                       </Button>\n//                     </Card>\n//                   ) : (\n//                     <div>Please select a user to start chatting</div>\n//                   )}\n//                 </Content>\n//               </Col>\n//             </Row>\n//           </Card>\n//           <div className=\"chatroom-footer\">\n//             Â© {moment().format('YYYY')}\n//           </div>\n//         </Col>\n//       </Row>\n//     </Layout>\n//   );\n// };\n\n// export default ChatRoom;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Card, List, Input, Button, Layout, Row, Col } from 'antd';\nimport io from 'socket.io-client';\nimport moment from 'moment';\n// import './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Content\n} = Layout;\nconst socket = io('http://localhost:5500');\nconst ChatRoom = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [isGroupChat, setIsGroupChat] = useState(false);\n  const chatContainerRef = useRef(null);\n  useEffect(() => {\n    const username = localStorage.getItem('username');\n    if (username) {\n      socket.emit('user connected', username);\n    }\n    socket.emit('get users');\n    socket.on('users list', usersList => {\n      setUsers(usersList.filter(user => user.username !== username)); // Filter out the signed-in user\n    });\n    socket.on('user status', userStatus => {\n      setUsers(prevUsers => prevUsers.map(user => user.username === userStatus.username ? {\n        ...user,\n        status: userStatus.status\n      } : user));\n    });\n    socket.on('chat history', history => {\n      if (selectedUser && !isGroupChat) {\n        localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n        setMessages(history);\n      }\n    });\n    socket.on('group chat history', history => {\n      if (isGroupChat) {\n        localStorage.setItem('chat_history_group', JSON.stringify(history));\n        setMessages(history);\n      }\n    });\n\n    // Handle personal chat messages\n    socket.on('personal chat message', msg => {\n      if (!isGroupChat && (msg.to === selectedUser || msg.username === selectedUser || msg.username === localStorage.getItem('username'))) {\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages, msg];\n          localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n          return updatedMessages;\n        });\n      }\n    });\n\n    // Handle group chat messages\n    socket.on('group chat message', msg => {\n      if (isGroupChat) {\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages, msg];\n          localStorage.setItem('chat_history_group', JSON.stringify(updatedMessages));\n          return updatedMessages;\n        });\n      }\n    });\n    return () => {\n      socket.off('users list');\n      socket.off('user status');\n      socket.off('chat history');\n      socket.off('group chat history');\n      socket.off('personal chat message');\n      socket.off('group chat message');\n    };\n  }, [selectedUser, isGroupChat]);\n  useEffect(() => {\n    if (isGroupChat) {\n      const savedHistory = localStorage.getItem('chat_history_group');\n      if (savedHistory) {\n        setMessages(JSON.parse(savedHistory));\n      } else {\n        socket.emit('get group chat history');\n      }\n    } else if (selectedUser) {\n      const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n      if (savedHistory) {\n        setMessages(JSON.parse(savedHistory));\n      } else {\n        socket.emit('get chat history', selectedUser);\n      }\n    }\n  }, [selectedUser, isGroupChat]);\n  const sendMessage = () => {\n    const username = localStorage.getItem('username');\n    if (!username) {\n      console.error('Username is not found in localStorage');\n      return;\n    }\n    const msg = {\n      username,\n      text: message,\n      timestamp: new Date()\n    };\n    if (isGroupChat) {\n      socket.emit('group chat message', msg);\n      setMessages(prevMessages => [...prevMessages, msg]);\n      localStorage.setItem('chat_history_group', JSON.stringify([...messages, msg]));\n    } else if (selectedUser) {\n      const msgToSend = {\n        ...msg,\n        to: selectedUser\n      };\n      socket.emit('personal chat message', msgToSend);\n      setMessages(prevMessages => [...prevMessages, msgToSend]);\n      localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify([...messages, msgToSend]));\n    }\n    setMessage('');\n  };\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    className: \"chatroom-layout\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 8,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"chatroom-sider\",\n          children: [/*#__PURE__*/_jsxDEV(List, {\n            itemLayout: \"horizontal\",\n            dataSource: users,\n            renderItem: user => /*#__PURE__*/_jsxDEV(List.Item, {\n              className: user.username === selectedUser && !isGroupChat ? 'ant-list-item-selected' : '',\n              onClick: () => {\n                setSelectedUser(user.username);\n                setIsGroupChat(false);\n              },\n              children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `user-badge ${user.status === 'online' ? 'user-badge-online' : 'user-badge-offline'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 29\n                }, this),\n                title: user.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: isGroupChat ? 'primary' : 'default',\n            block: true,\n            onClick: () => {\n              setSelectedUser(null);\n              setIsGroupChat(true);\n            },\n            style: {\n              marginTop: '15px'\n            },\n            children: \"Group Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 16,\n        md: 18,\n        children: /*#__PURE__*/_jsxDEV(Content, {\n          className: \"chatroom-content\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"chatroom-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ref: chatContainerRef,\n              className: \"chat-container\",\n              children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: msg.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 21\n                }, this), \": \", msg.text, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: moment(msg.timestamp).format('HH:mm:ss')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 65\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              value: message,\n              onChange: e => setMessage(e.target.value),\n              onPressEnter: sendMessage,\n              placeholder: \"Type a message...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              onClick: sendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"chatroom-footer\",\n      children: [\"\\xA9 \", moment().year()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"rn1T+jr3zIp3Ni63MSLHbwzkuDc=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","List","Input","Button","Layout","Row","Col","io","moment","jsxDEV","_jsxDEV","Content","socket","ChatRoom","_s","users","setUsers","selectedUser","setSelectedUser","messages","setMessages","message","setMessage","isGroupChat","setIsGroupChat","chatContainerRef","username","localStorage","getItem","emit","on","usersList","filter","user","userStatus","prevUsers","map","status","history","setItem","JSON","stringify","msg","to","prevMessages","updatedMessages","off","savedHistory","parse","sendMessage","console","error","text","timestamp","Date","msgToSend","current","scrollTop","scrollHeight","className","children","xs","sm","md","itemLayout","dataSource","renderItem","Item","onClick","Meta","avatar","fileName","_jsxFileName","lineNumber","columnNumber","title","type","block","style","marginTop","ref","index","format","value","onChange","e","target","onPressEnter","placeholder","year","_c","$RefreshReg$"],"sources":["/Users/avinashsaini/Documents/project/chat/client/src/components/Chatroom.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { Card, List, Input, Button, Layout, Row, Col } from 'antd';\n// import io from 'socket.io-client';\n// import './ChatRoom.css';\n// import moment from 'moment';\n\n// const { Content } = Layout;\n\n// const socket = io('http://localhost:5500');\n\n// const ChatRoom = () => {\n//   const [users, setUsers] = useState([]);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [message, setMessage] = useState('');\n//   const [isGroupChat, setIsGroupChat] = useState(false);\n//   const chatContainerRef = useRef(null);\n\n//   useEffect(() => {\n//     const username = localStorage.getItem('username');\n//     if (username) {\n//       socket.emit('user connected', username);\n//     }\n\n//     socket.emit('get users');\n//     socket.on('users list', (usersList) => {\n//       setUsers(usersList.filter(user => user.username !== username)); // Filter out the signed-in user\n//     });\n\n//     socket.on('user status', (userStatus) => {\n//       setUsers((prevUsers) =>\n//         prevUsers.map(user =>\n//           user.username === userStatus.username ? { ...user, status: userStatus.status } : user\n//         )\n//       );\n//     });\n\n//     socket.on('chat history', (history) => {\n//       if (selectedUser && !isGroupChat) {\n//         localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     socket.on('group chat history', (history) => {\n//       if (isGroupChat) {\n//         localStorage.setItem('chat_history_group', JSON.stringify(history));\n//         setMessages(history);\n//       }\n//     });\n\n//     // Handle personal chat messages\n//     socket.on('personal chat message', (msg) => {\n//       if (!isGroupChat && (msg.to === selectedUser || msg.username === selectedUser || msg.username === localStorage.getItem('username'))) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n    \n\n//     // Handle group chat messages\n//     socket.on('group chat message', (msg) => {\n//       if (isGroupChat) {\n//         setMessages((prevMessages) => {\n//           const updatedMessages = [...prevMessages, msg];\n//           localStorage.setItem('chat_history_group', JSON.stringify(updatedMessages));\n//           return updatedMessages;\n//         });\n//       }\n//     });\n\n//     return () => {\n//       socket.off('users list');\n//       socket.off('user status');\n//       socket.off('chat history');\n//       socket.off('group chat history');\n//       socket.off('personal chat message');\n//       socket.off('group chat message');\n//     };\n//   }, [selectedUser, isGroupChat]);\n\n//   useEffect(() => {\n//     if (isGroupChat) {\n//       const savedHistory = localStorage.getItem('chat_history_group');\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get group chat history');\n//       }\n//     } else if (selectedUser) {\n//       const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n//       if (savedHistory) {\n//         setMessages(JSON.parse(savedHistory));\n//       } else {\n//         socket.emit('get chat history', selectedUser);\n//       }\n//     }\n//   }, [selectedUser, isGroupChat]);\n\n//   const sendMessage = () => {\n//     const username = localStorage.getItem('username');\n//     if (!username) {\n//       console.error('Username is not found in localStorage');\n//       return;\n//     }\n  \n//     const msg = { username, text: message, timestamp: new Date() };\n  \n//     if (isGroupChat) {\n//       socket.emit('group chat message', msg);\n//     } else {\n//       socket.emit('chat message', { ...msg, to: selectedUser });\n//       // Do not add the message to the local state here\n//     }\n//     setMessage('');\n//   };\n  \n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('username');\n//     window.location.href = '/';\n//   };\n\n//   useEffect(() => {\n//     if (chatContainerRef.current) {\n//       chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n//     }\n//   }, [messages]);\n\n//   const handleUserClick = (user) => {\n//     if (user === 'Group Chat') {\n//       setSelectedUser(null);\n//       setIsGroupChat(true);\n//     } else {\n//       setSelectedUser(user);\n//       setIsGroupChat(false);\n//     }\n//   };\n\n//   return (\n//     <Layout className=\"chatroom-layout\">\n//       <Row justify=\"center\" align=\"middle\" style={{ height: '100%', padding: '10px' }}>\n//         <Col xs={24} sm={22} md={20} lg={18} xl={16}>\n//           <Card\n//             className=\"chatroom-card\"\n//             title=\"Chat Room\"\n//             bordered={false}\n//             extra={<Button onClick={logout}>Logout</Button>}\n//           >\n//             <Row gutter={[16, 16]}>\n//               <Col xs={24} md={8} className=\"chatroom-sider\">\n//                 <List\n//                   dataSource={['Group Chat', ...users.map(user => user.username)]}\n//                   renderItem={(user) => (\n//                     <List.Item\n//                       className={user === selectedUser ? 'ant-list-item-selected' : ''}\n//                       style={{ cursor: 'pointer' }}\n//                       onClick={() => handleUserClick(user)}\n//                     >\n//                       <div style={{ display: 'flex', alignItems: 'center' }}>\n//                         <div\n//                           className={users.find(u => u.username === user)?.status === 'online' ? 'user-badge' : 'user-badge-offline'}\n//                         />\n//                         <strong style={{ marginLeft: '8px' }}>{user}</strong>\n//                       </div>\n//                     </List.Item>\n//                   )}\n//                 />\n//               </Col>\n//               <Col xs={24} md={16}>\n//                 <Content style={{ padding: '10px' }}>\n//                   {isGroupChat || selectedUser ? (\n//                     <Card title={isGroupChat ? \"Group Chat\" : `Chat with ${selectedUser}`} bordered={false}>\n//                       <div ref={chatContainerRef} id=\"chat-container\" className=\"chat-container\" style={{ height: '300px', overflowY: 'auto' }}>\n//                         <List\n//                           dataSource={messages}\n//                           renderItem={(item) => (\n//                             <List.Item>\n//                               <strong>{item.username}:</strong> {item.text}{' '}\n//                               <em>{new Date(item.timestamp).toLocaleTimeString()}</em>\n//                             </List.Item>\n//                           )}\n//                         />\n//                       </div>\n//                       <Input\n//                         value={message}\n//                         onChange={(e) => setMessage(e.target.value)}\n//                         onPressEnter={sendMessage}\n//                         placeholder=\"Type a message...\"\n//                         style={{ marginBottom: '10px' }}\n//                       />\n//                       <Button type=\"primary\" onClick={sendMessage}>\n//                         Send\n//                       </Button>\n//                     </Card>\n//                   ) : (\n//                     <div>Please select a user to start chatting</div>\n//                   )}\n//                 </Content>\n//               </Col>\n//             </Row>\n//           </Card>\n//           <div className=\"chatroom-footer\">\n//             Â© {moment().format('YYYY')}\n//           </div>\n//         </Col>\n//       </Row>\n//     </Layout>\n//   );\n// };\n\n// export default ChatRoom;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Card, List, Input, Button, Layout, Row, Col } from 'antd';\nimport io from 'socket.io-client';\nimport moment from 'moment';\n// import './ChatRoom.css';\n\nconst { Content } = Layout;\n\nconst socket = io('http://localhost:5500');\n\nconst ChatRoom = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [isGroupChat, setIsGroupChat] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  useEffect(() => {\n    const username = localStorage.getItem('username');\n    if (username) {\n      socket.emit('user connected', username);\n    }\n\n    socket.emit('get users');\n    socket.on('users list', (usersList) => {\n      setUsers(usersList.filter(user => user.username !== username)); // Filter out the signed-in user\n    });\n\n    socket.on('user status', (userStatus) => {\n      setUsers((prevUsers) =>\n        prevUsers.map(user =>\n          user.username === userStatus.username ? { ...user, status: userStatus.status } : user\n        )\n      );\n    });\n\n    socket.on('chat history', (history) => {\n      if (selectedUser && !isGroupChat) {\n        localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(history));\n        setMessages(history);\n      }\n    });\n\n    socket.on('group chat history', (history) => {\n      if (isGroupChat) {\n        localStorage.setItem('chat_history_group', JSON.stringify(history));\n        setMessages(history);\n      }\n    });\n\n    // Handle personal chat messages\n    socket.on('personal chat message', (msg) => {\n      if (!isGroupChat && (msg.to === selectedUser || msg.username === selectedUser || msg.username === localStorage.getItem('username'))) {\n        setMessages((prevMessages) => {\n          const updatedMessages = [...prevMessages, msg];\n          localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify(updatedMessages));\n          return updatedMessages;\n        });\n      }\n    });\n    \n\n    // Handle group chat messages\n    socket.on('group chat message', (msg) => {\n      if (isGroupChat) {\n        setMessages((prevMessages) => {\n          const updatedMessages = [...prevMessages, msg];\n          localStorage.setItem('chat_history_group', JSON.stringify(updatedMessages));\n          return updatedMessages;\n        });\n      }\n    });\n\n    return () => {\n      socket.off('users list');\n      socket.off('user status');\n      socket.off('chat history');\n      socket.off('group chat history');\n      socket.off('personal chat message');\n      socket.off('group chat message');\n    };\n  }, [selectedUser, isGroupChat]);\n\n  useEffect(() => {\n    if (isGroupChat) {\n      const savedHistory = localStorage.getItem('chat_history_group');\n      if (savedHistory) {\n        setMessages(JSON.parse(savedHistory));\n      } else {\n        socket.emit('get group chat history');\n      }\n    } else if (selectedUser) {\n      const savedHistory = localStorage.getItem(`chat_history_${selectedUser}`);\n      if (savedHistory) {\n        setMessages(JSON.parse(savedHistory));\n      } else {\n        socket.emit('get chat history', selectedUser);\n      }\n    }\n  }, [selectedUser, isGroupChat]);\n\n  const sendMessage = () => {\n    const username = localStorage.getItem('username');\n    if (!username) {\n      console.error('Username is not found in localStorage');\n      return;\n    }\n  \n    const msg = { username, text: message, timestamp: new Date() };\n  \n    if (isGroupChat) {\n      socket.emit('group chat message', msg);\n      setMessages((prevMessages) => [...prevMessages, msg]);\n      localStorage.setItem('chat_history_group', JSON.stringify([...messages, msg]));\n    } else if (selectedUser) {\n      const msgToSend = { ...msg, to: selectedUser };\n      socket.emit('personal chat message', msgToSend);\n      setMessages((prevMessages) => [...prevMessages, msgToSend]);\n      localStorage.setItem(`chat_history_${selectedUser}`, JSON.stringify([...messages, msgToSend]));\n    }\n    setMessage('');\n  };\n  \n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <Layout className=\"chatroom-layout\">\n      <Row>\n        <Col xs={24} sm={8} md={6}>\n          <Card className=\"chatroom-sider\">\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={users}\n              renderItem={(user) => (\n                <List.Item\n                  className={\n                    user.username === selectedUser && !isGroupChat ? 'ant-list-item-selected' : ''\n                  }\n                  onClick={() => {\n                    setSelectedUser(user.username);\n                    setIsGroupChat(false);\n                  }}\n                >\n                  <List.Item.Meta\n                    avatar={<span className={`user-badge ${user.status === 'online' ? 'user-badge-online' : 'user-badge-offline'}`} />}\n                    title={user.username}\n                  />\n                </List.Item>\n              )}\n            />\n            <Button\n              type={isGroupChat ? 'primary' : 'default'}\n              block\n              onClick={() => {\n                setSelectedUser(null);\n                setIsGroupChat(true);\n              }}\n              style={{ marginTop: '15px' }}\n            >\n              Group Chat\n            </Button>\n          </Card>\n        </Col>\n        <Col xs={24} sm={16} md={18}>\n          <Content className=\"chatroom-content\">\n            <Card className=\"chatroom-card\">\n              <div ref={chatContainerRef} className=\"chat-container\">\n                {messages.map((msg, index) => (\n                  <div key={index} className=\"chat-message\">\n                    <strong>{msg.username}</strong>: {msg.text} <span>{moment(msg.timestamp).format('HH:mm:ss')}</span>\n                  </div>\n                ))}\n              </div>\n              <Input\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onPressEnter={sendMessage}\n                placeholder=\"Type a message...\"\n              />\n              <Button type=\"primary\" onClick={sendMessage}>\n                Send\n              </Button>\n            </Card>\n          </Content>\n        </Col>\n      </Row>\n      <footer className=\"chatroom-footer\">Â© {moment().year()}</footer>\n    </Layout>\n  );\n};\n\nexport default ChatRoom;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,GAAG,EAAEC,GAAG,QAAQ,MAAM;AAClE,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,MAAM,MAAM,QAAQ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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}